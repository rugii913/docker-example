services:
  server: # nginx - 요청을 받고 PHP interpreter를 트리거
    image: "nginx:stable-alpine"
    ports:
      - "8000:80"
    volumes:
      - "./nginx/nginx.conf:/etc/nginx/nginx.conf:ro" # https://hub.docker.com/_/nginx → Customize configuration 부분 참고
  php: # PHP, Laravel 코드 실행
    build:
      context: "./dockerfiles"
      dockerfile: "php.dockerfile"
    volumes:
      - "./src:/var/www/html:delegated" # cf. delegated는 최적화 관련 옵션 - container의 쓰기 작업 시 batch 처리(안정성을 떨어지지만, 속도 향상)
      # cf. Laravel에서 응답으로 돌려줄 view 같은 것들을 생성해야하므로 ro 옵션을 주지는 않음
    # ports: # https://github.com/docker-library/php/blob/04bf8d212e841e3e4b05e51882660ab9773f479f/8.1/alpine3.19/fpm/Dockerfile 이런 php Dockerfile을 살펴보면 EXPOSE 9000 확인 가능
      # - "9000:9000" # 그런데 localhost로의 통신이 아니라 container 간 직접 통신이므로 port publish할 필요가 없음
  mysql:
    image: "mysql:5.7"
    env_file: # https://hub.docker.com/_/mysql 의 Environment Variables 부분 참고 # homestead는 Laravel 기본 구성값
      - "./env/mysql.env"
  composer: # Laravel에 의해 내부적으로 사용될 utility 성격 container # 처음 Laravel app을 설정하는 데 사용하기도 할 것
    build:
      context: "./dockerfiles"
      dockerfile: "composer.dockerfile"
    volumes:
      - "./src:/var/www/html" # Laravel 설치 및 프로젝트 설정 시 ./src에 있는 source code를 이용하도록 함
  # artisan:
  # npm:
